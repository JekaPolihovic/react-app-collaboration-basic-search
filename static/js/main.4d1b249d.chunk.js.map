{"version":3,"sources":["components/List/_styles.tsx","components/List/index.tsx","components/App/_styles.tsx","components/App/index.tsx","utils/index.tsx","serviceWorker.ts","index.tsx"],"names":["ListContainer","styled","ul","ListItem","li","Empty","div","List","items","length","map","item","index","key","SearchContainer","SearchInput","input","PreloaderText","span","initialData","Data","App","React","useState","initialized","setInitialized","searchText","setSearchText","filteredData","setFilteredData","isSearching","setIsSearching","debounced","useRef","func","delay","inDebounce","args","arguments","clearTimeout","setTimeout","apply","debounce","newValue","regexp","RegExp","filter","test","toLowerCase","useEffect","current","decodeURI","window","location","hash","slice","className","type","onInput","e","value","target","defaultValue","placeholder","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"snBACO,IAAMA,EAAgBC,IAAOC,GAAV,KAMbC,EAAWF,IAAOG,GAAV,KAKRC,EAAQJ,IAAOK,IAAV,KCMHC,EAbV,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACN,OAAqB,IAAjBA,EAAMC,OACD,kBAACJ,EAAD,sBAGP,kBAACL,EAAD,KACGQ,EAAME,KAAI,SAACC,EAAMC,GAAP,OACT,kBAACT,EAAD,CAAUU,IAAKD,GAAQD,Q,wmBCXxB,IAAMG,EAAkBb,IAAOK,IAAV,KAMfS,EAAcd,IAAOe,MAAV,KAYXC,EAAgBhB,IAAOiB,KAAV,KCbpBC,EAAcC,EA0DLC,MAxDf,WAAgB,IAAD,EACyBC,IAAMC,UAAkB,GADjD,mBACNC,EADM,KACOC,EADP,OAEuBH,IAAMC,SAAiB,IAF9C,mBAENG,EAFM,KAEMC,EAFN,OAG2BL,IAAMC,SAAmBJ,GAHpD,mBAGNS,EAHM,KAGQC,EAHR,OAIyBP,IAAMC,UAAkB,GAJjD,mBAINO,EAJM,KAIOC,EAJP,KAaPC,EAAiBV,IAAMW,OCrBP,SAACC,EAAUC,GAC/B,IAAIC,EACJ,OAAO,WAEL,IAAMC,EAAOC,UACbC,aAAaH,GACbA,EAAaI,YAAW,kBAAMN,EAAKO,MAAM,KAAMJ,KAAOF,IDgBxDO,EAAS,SAACC,GACR,GAAiB,KAAbA,EAGF,OAFAd,EAAgBV,QAChBY,GAAe,GAIjB,IAAMa,EAAS,IAAIC,OAAOF,GACpBf,EAAeT,EAAY2B,QAAO,SAACnC,GACvC,OAAOiC,EAAOG,KAAKpC,EAAKqC,kBAE1BnB,EAAgBD,GAChBG,GAAe,KACd,MAeL,OAZAT,IAAM2B,WAAU,WACdlB,GAAe,GACfC,EAAUkB,QAAQxB,KACjB,CAACA,IAEJJ,IAAM2B,WAAU,WACTzB,IACHC,GAAe,GACfE,EAAcwB,UAAUC,OAAOC,SAASC,KAAKC,MAAM,GAAGP,oBAIrDxB,EAKH,yBAAKgC,UAAU,OACX,kBAAC1C,EAAD,KACI,kBAACC,EAAD,CAAa0C,KAAK,OAAOC,QA3Cd,SAACC,GACpB,IAAMC,EAAQD,EAAEE,OAAOD,MAAMZ,cAC7BrB,EAAciC,GACdR,OAAOC,SAASC,KAAOM,GAwCiCE,aAAcpC,EAAYqC,YAAY,cACrFjC,EAAc,kBAACb,EAAD,uBAAiD,kBAAC,EAAD,CAAMT,MAAOoB,MAP9E,MEvCSoC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4d1b249d.chunk.js","sourcesContent":["import styled from '@emotion/styled'\nexport const ListContainer = styled.ul`\n    margin: 0;\n    padding: 0;\n    background: transparent;\n    list-style-type: none;\n`;\nexport const ListItem = styled.li`\n    background: #efeaea;\n    padding: 12px 22px;\n    margin-bottom: 5px;\n`;\nexport const Empty = styled.div`\n    background: #efeaea;\n    padding: 12px 22px;\n    margin-bottom: 5px;\n`;\n","import React from \"react\";\nimport { ListContainer, ListItem, Empty } from \"./_styles\";\n\nconst List: React.StatelessComponent<{\n  items: string[];\n}> = ({ items }) => {\n  if (items.length === 0) {\n    return <Empty>Nothing found</Empty>;\n  }\n  return (\n    <ListContainer>\n      {items.map((item, index) => (\n        <ListItem key={index}>{item}</ListItem>\n      ))}\n    </ListContainer>\n  );\n};\n\nexport default List;\n","import styled from '@emotion/styled'\nexport const SearchContainer = styled.div`\n    padding: 16px 22px;\n    border: 1px solid #dedede;\n    border-radius: 3px;\n    font-family: \"Source Sans Pro\", \"Arial\", sans-serif;\n`;\nexport const SearchInput = styled.input`\n    width: 100%;\n    max-width: 350px;\n    padding: 16px 22px;\n    margin-bottom: 15px;\n    border: 1px solid #dedede;\n    border-radius: 3px;\n    color: #000000;\n    &:focus {\n      outline: none;\n    }\n`;\nexport const PreloaderText = styled.span`\n    margin-left: 20px;\n    transition: all 2s;\n`;\n\n","import React from \"react\";\nimport Data from \"./../../data.json\";\nimport { debounce } from \"./../../utils/index\";\nimport List from \"../List\";\nimport { SearchInput, SearchContainer, PreloaderText } from \"./_styles\";\n\nconst initialData = Data;\n\nfunction App() {\n  const [initialized, setInitialized] = React.useState<boolean>(false);\n  const [searchText, setSearchText] = React.useState<string>(\"\");\n  const [filteredData, setFilteredData] = React.useState<string[]>(initialData);\n  const [isSearching, setIsSearching] = React.useState<boolean>(false);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.toLowerCase();\n    setSearchText(value);\n    window.location.hash = value;\n  };\n\n  // for better searching\n  const debounced: any = React.useRef(\n    debounce((newValue: string) => {\n      if (newValue === \"\") {\n        setFilteredData(initialData);\n        setIsSearching(false);\n        return;\n      }\n\n      const regexp = new RegExp(newValue);\n      const filteredData = initialData.filter((item) => {\n        return regexp.test(item.toLowerCase());\n      });\n      setFilteredData(filteredData);\n      setIsSearching(false);\n    }, 500)\n  );\n\n  React.useEffect(() => {\n    setIsSearching(true);\n    debounced.current(searchText);\n  }, [searchText]);\n\n  React.useEffect(() => {\n    if (!initialized) {\n      setInitialized(true);\n      setSearchText(decodeURI(window.location.hash.slice(1).toLowerCase()));\n    }\n  });\n\n  if (!initialized) {\n    return null;\n  }\n\n  return (\n    <div className=\"App\">\n        <SearchContainer>\n            <SearchInput type=\"text\" onInput={handleChange} defaultValue={searchText} placeholder=\"Search...\" />\n            {isSearching ? <PreloaderText>Searching.....</PreloaderText>  : <List items={filteredData} />}\n        </SearchContainer>\n    </div>\n  );\n}\n\nexport default App;\n","export const debounce = (func:any, delay:any) => {\n    let inDebounce:any;\n    return function() {\n      \n      const args = arguments\n      clearTimeout(inDebounce)\n      inDebounce = setTimeout(() => func.apply(null, args), delay)\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}